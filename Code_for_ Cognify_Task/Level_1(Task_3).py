"""Cognify task

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1XTbgRl_mL7NE7HV_95vV0Va3bfiJpDdS
"""
#cognify level 1(task 3)
#Geospatial Analysis

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px
# Load the dataset
df = pd.read_csv('Dataset .csv')
#Visualize the locations of restaurants on a map using latitude and longitude information

# Step 1: Drop missing location values (if any)
df = df.dropna(subset=['Latitude', 'Longitude'])

# Step 2: Create an interactive map using Plotly
fig = px.scatter_geo(df,
                     lat='Latitude',
                     lon='Longitude',
                     hover_name='Restaurant Name',
                     title='Restaurant Locations Around the World',
                     opacity=0.6)

# Step 3: Auto-fit map view to data points
fig.update_geos(fitbounds="locations", visible=False)

# Step 4: Show the map
fig.show()


#Analyze the distribution of restaurants across different cities or countries
# ðŸ”¹ 1. Distribution across Cities (Top 10)
city_counts = df['City'].value_counts().head(10)
print("ðŸ”¹ Top 10 Cities by Restaurant Count:\n")
print(city_counts)

# ðŸ”¸ Plot top 10 cities
plt.figure(figsize=(10,5))
sns.barplot(x=city_counts.values, y=city_counts.index, palette='Set2')
plt.title('Top 10 Cities with Most Restaurants')
plt.xlabel('Number of Restaurants')
plt.ylabel('City')
plt.tight_layout()
plt.show()

# ðŸ”¹ 2. Distribution across Countries
country_counts = df['Country Code'].value_counts()
print("\nðŸ”¹ Restaurant Count by Country Code:\n")
print(country_counts)

# ðŸ”¸ Optional: Plot country-level distribution (Top 10)
top_countries = country_counts.head(10)
plt.figure(figsize=(10,5))
sns.barplot(x=top_countries.values, y=top_countries.index, palette='Paired')
plt.title('Top 10 Countries with Most Restaurants')
plt.xlabel('Number of Restaurants')
plt.ylabel('Country Code')
plt.tight_layout()
plt.show()


#Determine if there is any correlation between the restaurant's location and its rating
# Convert 'Aggregate rating' to numeric
df['Aggregate rating'] = pd.to_numeric(df['Aggregate rating'], errors='coerce')

# ðŸ”¹ 1. Average rating per city (Top 10 by restaurant count)
top_cities = df['City'].value_counts().head(10).index
city_rating = df[df['City'].isin(top_cities)].groupby('City')['Aggregate rating'].mean().sort_values(ascending=False)

print("ðŸ”¹ Average Rating by Top 10 Cities:\n")
print(city_rating)

# ðŸ”¸ Plot average rating by city
plt.figure(figsize=(10,5))
sns.barplot(x=city_rating.values, y=city_rating.index, palette='coolwarm')
plt.title('Average Restaurant Rating by City (Top 10)')
plt.xlabel('Average Aggregate Rating')
plt.ylabel('City')
plt.tight_layout()
plt.show()

# ðŸ”¹ 2. Average rating per country (based on Country Code)
country_rating = df.groupby('Country Code')['Aggregate rating'].mean().sort_values(ascending=False)

print("\nðŸ”¹ Average Rating by Country Code:\n")
print(country_rating)
