"""Cognify task

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1XTbgRl_mL7NE7HV_95vV0Va3bfiJpDdS
"""
#cognify level 2(task 2)
#Task: Price Range Analysis

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px
# Load the dataset
df = pd.read_csv('Dataset .csv')


#Determine the most common price range among all the restaurants.
# Convert 'Price range' column to numeric if needed
df['Price range'] = pd.to_numeric(df['Price range'], errors='coerce')

# ðŸ”¹ Find the most common price range
price_counts = df['Price range'].value_counts().sort_index()
most_common = price_counts.idxmax()

# Display results
print("ðŸ”¹ Count of Each Price Range:\n")
print(price_counts)

print(f"\nâœ… Most Common Price Range: {most_common}")

# ðŸ”¸ Optional: Visualize it
plt.figure(figsize=(6,4))
sns.barplot(x=price_counts.index, y=price_counts.values, palette='pastel')
plt.title('Distribution of Price Ranges')
plt.xlabel('Price Range')
plt.ylabel('Number of Restaurants')
plt.tight_layout()
plt.show()

# Calculate the average rating for each price range

# Convert columns to numeric if needed
df['Price range'] = pd.to_numeric(df['Price range'], errors='coerce')
df['Aggregate rating'] = pd.to_numeric(df['Aggregate rating'], errors='coerce')

# ðŸ”¹ Group by Price range and calculate average rating
avg_rating_by_price = df.groupby('Price range')['Aggregate rating'].mean()

# ðŸ”¸ Display results
print("ðŸ”¹ Average Aggregate Rating for Each Price Range:\n")
print(avg_rating_by_price)

# ðŸ”¸ Optional: Plot the average ratings
plt.figure(figsize=(6,4))
sns.barplot(x=avg_rating_by_price.index, y=avg_rating_by_price.values, palette='Blues')
plt.title('Average Rating by Price Range')
plt.xlabel('Price Range')
plt.ylabel('Average Rating')
plt.tight_layout()
plt.show()


# Identify the color that represents the highest average rating among different price ranges
# Convert necessary columns
df['Price range'] = pd.to_numeric(df['Price range'], errors='coerce')
df['Aggregate rating'] = pd.to_numeric(df['Aggregate rating'], errors='coerce')

# Group by Price range and Rating color, calculate average rating
avg_rating_by_color = df.groupby(['Price range', 'Rating color'])['Aggregate rating'].mean().reset_index()

# For each price range, find the color with the highest average rating
top_color_per_price = avg_rating_by_color.sort_values(['Price range', 'Aggregate rating'], ascending=[True, False]) \
                                         .drop_duplicates('Price range')

# Display results
print("ðŸ”¹ Color Representing Highest Average Rating in Each Price Range:\n")
print(top_color_per_price)
